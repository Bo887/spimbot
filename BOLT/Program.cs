using System;
using System.Text;

namespace BOLT {
    class Program {
        const string TestPuzzle = @"
________________####_________________
______#_________######_______________
_____#_##______###___##____________##
____##_##_______##____#___________###
____##___#__________________##____##_
____##_##___________###_____###___#_#
___#__#____________###___#___#####_#_
___#_____###__#_#_#_##__####___#_##__
_##__#######__#####_____#__#_________
#___###__####_##______###__#__####___
##___#________##_###_#_______#####___
#____________##__###_#_###____#_##___
##__________#___###__#_###____###____
#_____________#####_##_________##__##
##__________#____#__##_##_______#__#_
#___________####____##_##______###__#
________#____####______###____####_#_
_####__##____###_##___###_#__##__#_#_
#____#_#_#___####______#_#_#_______##
____###__#____#_#_____##__##____#####
___####_#______________#_##____##__#_
___#######__###________##______#_____
_____##_#___####_____#___________###_
__________##__##_____##_______#####_#
__________#_####______#_______####_##
___________#####_#_##_#___#___###___#
______________##_####_#_####___#__#_#
_________###______#####__#####___##__
__________###_###_###____####___####_
___________#__##__________##_____###_
________##___#____##_##__#________#__
_______#####_##_##_##_##__#________##
_______#####_##_##__#_#_#__#_______##
_______####_____#___#__##__##____###_
_______#_#___##______###__###____###_
______####_#######____#____#__##_____
_________#_########__________##_####_";

        static void Main(string[] args) {
            Puzzle puzzle = new Puzzle(TestPuzzle);
            Console.WriteLine(puzzle);
        }


    }
    class Puzzle {
        public int Width;
        public int Height;
        public char[] Map;
        public byte[] Bitmap;
        public Puzzle(string Text) {
            string[] lines = Text.Split("\r\n", StringSplitOptions.RemoveEmptyEntries);
            Height = lines.Length;
            Width = lines[0].Length;
            Map = new char[Width * Height];
            int bytesWidth = (Width % 8 == 0) ? (Width / 8) : (Width / 8) + 1;
            Bitmap = new byte[bytesWidth * Height];
            for (int y = 0; y < Height; y++) {
                for (int x = 0; x < Width; x++) {
                    Map[y * Width + x] = lines[y][x];
                    if (Map[y * Width + x] == '#') Bitmap[y * bytesWidth + x / 8] |= (byte) (1 << (7 - (x % 8)));
                }
            }
        }
        public override string ToString() {
            StringBuilder builder = new StringBuilder();
            for (int c = 0; c < Width * Height; c++) {
                if (c % Width == 0 && c > 0) builder.AppendLine();
                builder.Append(Map[c]);
            }
            return builder.ToString();
        }
    }
}
