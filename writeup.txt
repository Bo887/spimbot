BOLT gets its name from its main optimization: the Big Ol' Lookup Tables used
in puzzle solving. The solver processes the puzzle in 8x1 strips using the 
bitmap. It keeps another bitmap indicating which positions might be touching
the yet-explored part of the current island. At each step, the remaining land
in the current strip is combined with the corresponding "touching" strip to
get an index into the two 64KB lookup tables that were generated with a C#
program. The "transition" table determines what the new land value at the 
current position should be; the other determines the mask to binary-OR with
the vertically adjacent "touching" strips. Neighboring land-containing strips
are visited in a BFS (using a queue, no recursion). This strategy provides is
5.5 to 9 times faster than the given solver code and, since it's running nearly
all the time, gives BOLT a lot of money to work with.

BOLT handles movement in a pretty standard way. BOLT is able to take in a target
point, and automatically turns and drives to the point (assuming there is nothing
blocking BOLT). It specifically calculates the time it needs to drive and sets 
timer interrupts to avoid constant polling. It also uses the floating point unit
(coprocessor 1) to make more accurate calculations. Also, when the match starts, 
BOLT figures out which side it is on, and it is able to generically make movement 
decisions from that information.

One interesting thing about BOLT is the way the code is structured. Most of the 
logic for BOLT is actually in kernel space (.ktext). The only portions in user 
space (.text) are some initialization routines and puzzle solving. BOLT also uses
a queue containing operations for BOLT to perform. This way, BOLT is always solving 
puzzles in user mode. When the queue is empty or when an interrupt triggers, 
BOLT switches to kernel mode to determine the next task (if needed) and fills up 
the queue with the according operations (if needed). After the queue is filled 
and interrupts are handled, BOLT switches back to user mode (spending most of its
time there) and continues solving puzzles. This essentially allows BOLT to 
"automatically" switch between solving puzzles and determining the next task.
